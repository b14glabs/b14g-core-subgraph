enum OrderActionType {
    CreateOrder
    StakeCoreToOrder
    WithdrawCoreFromOrder
    ClaimCoreForBTCHolder
    ClaimCoreForCoreHolder

}
enum VaultActionType{
    StakeCoreToVault
    RedeemNormallyCoreFromVault
    RedeemInstantlyCoreFromVault
    WithdrawCoreFromVault
    ReInvestVault
}

enum LotteryActionType {
  DepositNFTToLottery
  WithdrawNFTFromLottery
  WinnerClaimReward
  StartRound
  EndRound
  RequestRandomness
  FullfillRandomness
}

type User @entity {
  id: Bytes!
  dualCoreBalance: BigInt!
  coreStakedInOrder: BigInt!
  stakedOrder: [StakedInOrder!]! @derivedFrom(field: "user")
  orderActionActivities: [OrderAction!]! @derivedFrom(field: "from")
  vaultActionActivities: [VaultAction!]! @derivedFrom(field: "from")
  lotteryActions: [LotteryAction!]! @derivedFrom(field: "from")
  yieldBtcs: [YieldBTC!]! @derivedFrom(field: "user")
  totalYeildDeposited: BigInt!

  # vault
  vaultActionCount: VaultActionCount! @derivedFrom(field: "user")
  # order
  orderActionCount: [OrderActionCount!]! @derivedFrom(field: "user")
  #lottery
  lotteryActionCount: LotteryActionCount! @derivedFrom(field: "user")

  totalValidOrder: Int!
}

type StakedInOrder @entity {
  id: Bytes! #orderId+userId
  amount: BigInt!
  user: User!
  order: Order!
}

type Vault @entity {
  id: Bytes!
  totalStaked: BigInt!
  totalActions: Int!
  totalDepositActions: Int!
  totalUnbondActions: Int!
  totalInstantRedeemActions: Int!
  totalWithdrawActions: Int!
  totalReInvestActions: Int!
  activities: [VaultAction!]! @derivedFrom(field: "to")
}

type Order @entity {
  id: Bytes!
  owner: Bytes!
  btcAmount: BigInt!
  unlockTime: Int
  validator: Bytes
  bitcoinLockTx: Bytes!
  fee: BigInt!
  rewardSharingPortion: BigInt!
  btcEarned: BigInt!
  coreEarned: BigInt!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  realtimeTier: BigInt!
  realtimeStakeAmount: BigInt!
  # creation stats
  totalActions: Int!
  totalStakeActions: Int!
  totalWithdrawActions: Int!
  totalClaimCoreActions: Int!
  totalClaimBtcActions: Int!
  activities: [OrderAction!]! @derivedFrom(field: "order")

  orderActionCounts: [OrderActionCount!]! @derivedFrom(field: "order")
  stakedInOrder: [StakedInOrder!]! @derivedFrom(field: "order")

  yieldBtc: YieldBTC! @derivedFrom(field: "order")
  roundReward: BigInt!
  updatedRound: BigInt!
}

type Lottery @entity {
  id: Bytes!
  currentRound: BigInt!
  round: [LotteryRound!]! @derivedFrom(field: "lottery")
  totalReward: BigInt!
  totalFee: BigInt!

  activities: [LotteryAction!]! @derivedFrom(field: "to")
  totalActions: Int!
  totalDeposit: Int!
  totalWithdraw: Int!
  totalWinnerClaim: Int!
  totalRequestRandomness: Int!
  totalFullfillRandomness: Int!
  totalEndRound: Int!
  totalStartRound: Int!

  totalParticipants: BigInt!
  totalYields: BigInt!
  totalBtcStaked: BigInt!
}

type LotteryRound @entity {
  id: ID!
  lottery: Lottery!
  startTime: BigInt!
  endTime: BigInt!
  round: BigInt!
  winners: [Bytes!]!
  rewardAmount: BigInt!
  feeAmount: BigInt!
  totalParticipants: BigInt!
  totalYields: BigInt!
  totalBtcStaked: BigInt!
  timestamp: BigInt!
  endRoundTx: Bytes!
  randomnessId: Bytes!
}

type OrderAction @entity(immutable: true) {
  id: Bytes!
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
  type: OrderActionType!
  from: User!
  order: Order!
  amount: BigInt
  totalCoreStaked: BigInt!
}

type VaultAction @entity(immutable: true) {
  id: Bytes!
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
  type: VaultActionType!
  from: User!
  to: Vault!
  amount: BigInt!
  totalCoreStaked: BigInt!
}

type LotteryAction @entity(immutable: true) {
  id: Bytes!
  txHash: Bytes!
  from: User!
  type: LotteryActionType!
  timestamp: BigInt!
  coreAmount: BigInt!
  receiverAmount: Int!
  btcAmount: BigInt!
  round: BigInt!
  to: Lottery!
}

type VaultExchangeRate @entity {
  id: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
  value: BigInt!
}

type DualCoreTransfer @entity(immutable: true) {
  # transaction hash + "-" + index in mints Transaction array
  id: Bytes!
  transaction: Bytes!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  amount: BigInt
  to: Bytes
  from: Bytes
  logIndex: BigInt
}

type Stats @entity {
  id: ID!
  totalStaker: Int!
  totalCoreStaked: BigInt!
  totalDualCore: BigInt!
  #   totalBtcStaked: BigInt!
  #   listOrder: [Order!]!
  totalEarned: BigInt!
}

type OrderActionCount @entity {
  id: Bytes! # orderId + userId
  order: Order!
  user: User!

  total: Int!
  stake: Int!
  withdraw: Int!
  claimCore: Int!
  claimBtc: Int!
}

type VaultActionCount @entity {
  id: Bytes!
  user: User!

  total: Int!
  stake: Int!
  unbond: Int!
  withdrawdirect: Int!
  withdraw: Int!
}

type LotteryActionCount @entity {
  id: Bytes!
  user: User!

  total: Int!
  stake: Int!
  withdraw: Int!
  claim: Int!
}

type YieldBTC @entity {
  id: Bytes!
  tokenId: BigInt!
  isDeposited: Boolean!
  user: User!
  order: Order!
}
