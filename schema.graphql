enum OrderActionType {
  CreateOrder
  StakeCoreToOrder
  WithdrawCoreFromOrder
  ClaimCoreForBTCHolder
  ClaimCoreForCoreHolder
}

enum UserActionType {
  Stake
  Withdraw
  ClaimReward
  Redeem

  # Vault-specific actions
  RedeemInstantly
  ReInvest
  BorrowCore
  RepayCore
  CoreInvest
  WithdrawCoreReward
  Migrate

  # Lottery-specific actions
  StartRound
  EndRound
  RequestRandomness
  FullfillRandomness
}

enum TransactionType {
  Stake
  Withdraw
  ClaimReward
  Redeem

  # Vault-specific actions
  RedeemInstantly
  ReInvest
  BorrowCore
  RepayCore
  CoreInvest
  WithdrawCoreReward
  Migrate

  # Lottery-specific actions
  StartRound
  EndRound
  RequestRandomness
  FullfillRandomness

  CreateOrder
  ClaimCoreForBTCHolder
  ClaimCoreForCoreHolder
}

enum ToType {
  DualCoreVault
  WbtcVault
  MergeMarketplace
  FairShare
  Lottery
}

type User @entity {
  id: Bytes!
  dualCoreBalance: BigInt!
  coreStakedInOrder: BigInt!
  stakedOrder: [StakedInOrder!]! @derivedFrom(field: "user")
  orderActionActivities: [OrderAction!]! @derivedFrom(field: "from")
  userActions: [VaultAction!]! @derivedFrom(field: "from")
  yieldBtcs: [YieldBTC!]! @derivedFrom(field: "user")
  totalYeildDeposited: BigInt!
  createdAt: BigInt!
  orders: [Order!]! @derivedFrom(field: "user")

  # action counts
  userActionCount: [UserActionCount!]! @derivedFrom(field: "user")
  # order
  orderActionCount: [OrderActionCount!]! @derivedFrom(field: "user")
  #fairShare
  fairShareActionCount: FairShareActionCount @derivedFrom(field: "user")

  totalValidOrder: Int!

  transactions: [Transaction!]! @derivedFrom(field: "from")
}

type Transaction @entity(immutable: true) {
  id: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
  from: User!
  txHash: Bytes!
  to: Bytes!
  type: TransactionType!
  toType: ToType!
  amount: BigInt!
  rewardAmount: BigInt
  round: BigInt
  receiverAmount: Int
}

type StakedInOrder @entity {
  id: Bytes! #orderId+userId
  amount: BigInt!
  user: User!
  order: Order!
}

type Vault @entity {
  id: Bytes!
  totalStaked: BigInt!
  total: Int!
  stake: Int!
  unbond: Int!
  redeemInstantly: Int!
  withdraw: Int!
  reInvest: Int!
  claim: Int!
  borrowCore: Int!
  repayCore: Int!
  migrate: Int
  activities: [VaultAction!]! @derivedFrom(field: "toVault")
}

enum OrderType {
  MERGE_ORDER
  FAIR_SHARE_ORDER
}
type Order @entity {
  id: Bytes!
  owner: Bytes!
  user: User!
  btcAmount: BigInt!
  unlockTime: Int
  validator: Bytes
  confirmTimestamp: BigInt
  bitcoinLockTx: Bytes!
  fee: BigInt!
  rewardSharingPortion: BigInt!
  btcEarned: BigInt!
  coreEarned: BigInt!
  createdAt: BigInt!
  createdAtBlock: BigInt!

  realtimeTier: BigInt!
  realtimeStakeAmount: BigInt!
  # creation stats
  total: Int!
  stake: Int!
  withdraw: Int!
  claimCore: Int!
  claimBtc: Int!
  activities: [OrderAction!]! @derivedFrom(field: "order")

  orderActionCounts: [OrderActionCount!]! @derivedFrom(field: "order")
  stakedInOrder: [StakedInOrder!]! @derivedFrom(field: "order")

  yieldBtc: YieldBTC! @derivedFrom(field: "order")
  type: OrderType!
}

type Lottery @entity {
  id: Bytes!
  currentRound: BigInt!
  round: [LotteryRound!]! @derivedFrom(field: "lottery")
  totalReward: BigInt!
  totalFee: BigInt!

  activities: [VaultAction!]! @derivedFrom(field: "toLottery")
  total: Int!
  stake: Int!
  withdraw: Int!
  claim: Int!
  requestRandomness: Int!
  fullfillRandomness: Int!
  endRound: Int!
  startRound: Int!

  totalParticipants: BigInt!
  totalYields: BigInt!
}

type LotteryRound @entity {
  id: ID!
  lottery: Lottery!
  startTime: BigInt!
  endTime: BigInt!
  round: BigInt!
  winners: [Bytes!]!
  rewardAmount: BigInt!
  feeAmount: BigInt!
  totalParticipants: BigInt!
  totalYields: BigInt!
  timestamp: BigInt!
  endRoundTx: Bytes!
  randomnessId: Bytes!
}

type OrderAction @entity(immutable: true) {
  id: Bytes!
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
  transaction: Transaction!
  type: OrderActionType!
  from: User!
  order: Order!
  amount: BigInt
  totalCoreStaked: BigInt!
}

type VaultAction @entity(immutable: true) {
  id: Bytes!
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
  transaction: Transaction!
  type: UserActionType!
  from: User!

  # Vault-specific fields
  toVault: Vault
  amount: BigInt
  rewardAmount: BigInt
  totalCoreStaked: BigInt

  # Lottery-specific fields
  toLottery: Lottery
  receiverAmount: Int
  btcAmount: BigInt
  round: BigInt
}

type VaultExchangeRate @entity {
  id: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
  value: BigInt!
}

type DualCoreTransfer @entity(immutable: true) {
  # transaction hash + "-" + index in mints Transaction array
  id: Bytes!
  transaction: Bytes!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  amount: BigInt
  to: Bytes
  from: Bytes
  logIndex: BigInt
}

type Stats @entity {
  id: ID!
  totalStaker: Int!
  totalCoreStaked: BigInt!
  totalDualCore: BigInt!
  vaultMaxCap: BigInt!
  #   totalBtcStaked: BigInt!
  #   listOrder: [Order!]!
  totalEarned: BigInt!
}

type OrderActionCount @entity {
  id: Bytes! # orderId + userId
  order: Order!
  user: User!

  total: Int!
  stake: Int!
  withdraw: Int!
  claimCore: Int!
  claimBtc: Int!
}

type FairShareActionCount @entity {
  id: Bytes!
  user: User!
  total: Int!
  claimDualCore: Int!
  unbond: Int!
  withdrawCore: Int
}

type UserActionCount @entity {
  id: Bytes!
  user: User!
  to: Bytes!

  total: Int!
  stake: Int!
  withdraw: Int!
  claim: Int!
  unbond: Int!
  migrate: Int
  withdrawDirect: Int!
}

type YieldBTC @entity {
  id: Bytes!
  tokenId: BigInt!
  isDeposited: Boolean!
  user: User!
  order: Order!
  roundReward: BigInt!
  updatedRound: BigInt!
}

type LendingVaultApy @entity {
  id: Bytes!
  vault: Vault!
  blockNumber: BigInt!
  timestamp: BigInt!
  apy: BigInt!
  colendApy: BigInt!
  boostApy: BigInt!
}